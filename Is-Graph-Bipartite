class Solution {
private:
    bool check(int start, vector<vector<int>>& graph, vector<int>& vis) {
        int m = graph.size();

        queue<int> q;
        q.push(start);
        vis[start] = 0;   // yaha pehle vis[0] tha (fix)

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (auto it : graph[node]) {
                if (vis[it] == -1) {
                    vis[it] = 1 - vis[node];   // flag + color function ki zarurat nahi
                    q.push(it);
                }
                else if (vis[it] == vis[node]) {
                    return false;   // same colour mila
                }
            }
        }

        return true;
    }

public:
    bool isBipartite(vector<vector<int>>& graph) {
        int k = graph.size();
        vector<int> vis(k, -1);

        for (int i = 0; i < k; i++) {
            if (vis[i] == -1) {
                if (check(i, graph, vis) == false) {   // flase -> false
                    return false;
                }
            }
        }
        return true;
    }
};

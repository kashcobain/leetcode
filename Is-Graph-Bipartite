class Solution {
public:
    bool dfs(int node, int color, const vector<vector<int>>& graph, vector<int> &vis) {
        vis[node] = color;
        for (auto it : graph[node]) {
            if (vis[it] == -1) {
                if (!dfs(it, !color, graph, vis)) return false; // result propagate
            }
            else if (vis[it] == color) {
                return false; // same color conflict
            }
        }
        return true;
    }

    bool isBipartite(vector<vector<int>>& graph) {
        int m = graph.size();
        vector<int> vis(m, -1);

        for (int i = 0; i < m; i++) {
            if (vis[i] == -1) { // only unvisited components
                if (!dfs(i, 0, graph, vis)) return false;
            }
        }
        return true;
    }
};
